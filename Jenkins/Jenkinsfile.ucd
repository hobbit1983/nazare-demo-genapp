// Agents Labels
def linuxAgent = 'master'
def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.ZOS_AGENT_LABEL : 'zos-e2e-pipeline'

// DBB
def dbbDaemonPort = null
def dbbDefaultbHlq = 'NAZARE.WAZI'
def dbbDefaultBuildType='-i'

// GIT
def gitCredId = 'id-sshsecret'
def gitOrg = 'IBMZSoftware'
def gitHost   = 'github.ibm.com'
def srcGitRepo =   'git@'+gitHost+':'+gitOrg+'/nazare-demo-genapp.git'
def adminGitRepo = 'git@'+gitHost+':'+gitOrg+'/nazare-demo-sysadmin.git'
def adminGitBranch = 'wazi-sandbox'
def srcGitBranch = 'wazi-sandbox'


// Artifactory
def serverId = "ArtifactoryE2EPipeline"
def server = Artifactory.server serverId
def artiCredentialsId = 'id-artifactory'
def repository = "wazi-e2e-pipeline-generic-local"
def repositoryFolder = "genapp/ucd"
def repositoryPath = repository + "/" + repositoryFolder

// ZCEE
def zceeCredId = 'id-zcee'
def zceeUrl = null

// UCD
def ucdApplication = 'GenApp-Hybrid-ZDT-Deploy'
def ucdProcess = 'Main-Process-Local'
def ucdComponent = 'GenApp-Hybrid-ZDT-Component'
def ucdEnv = 'zDT-UnitTest-Dist'
def ucdSite = 'UrbanCodeE2EPipeline'

// Verbose
def verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false

// Private
def hasBuildFiles = true
def buildVerbose = verbose ? '-v' : ''
 
def isPullOrMergeRequest ( ) {
	def isMr = env.CHANGE_ID != null || ( env.gitlabActionType != null && env.gitlabActionType == 'MERGE' )
	if ( isMr && env.CHANGE_ID == null )
		env.CHANGE_ID = env.gitlabMergeRequestIid
	return isMr
}

pipeline {

	agent { label linuxAgent }

	options { skipDefaultCheckout(true) }

	stages {
		stage('Init') {
			steps {
				script {
					if ( verbose ) {
						echo sh(script: 'env|sort', returnStdout: true)
					}
					if ( env.PROJECT_NAME ) {
					  gitCredId = env.PROJECT_NAME + '-sshsecret'
					  zosSshCredId = env.PROJECT_NAME + '-sshsecret'
					  artiCredentialsId = env.PROJECT_NAME + '-artifactory'
					  zceeCredId = env.PROJECT_NAME + '-zcee'
					}

				}
			}
		}
		
		stage('Git Clone/Refresh') {
			agent { label zOsAgentLabel }
			steps {
				script {
					try {
						srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
						srcGitBranch = scm.branches[0].name
						adminGitRepo = srcGitRepo.substring(0, srcGitRepo.lastIndexOf('/')) + "/nazare-demo-sysadmin.git"
						adminGitBranch = srcGitBranch
					} catch ( Exception ex ) {
					} 
					println "URL is   : $srcGitRepo"
					println "Branch is: $srcGitBranch"
					if ( verbose ) {
						echo sh(script: 'env|sort', returnStdout: true)
					}
					dir('nazare-demo-genapp') {
						// Root location of the groovy script.
						env.WORKSPACE_ROOT = "${WORKSPACE}".substring(0, "${WORKSPACE}".lastIndexOf('/')) + "/" + gitOrg + "/" + adminGitBranch
						if ( isPullOrMergeRequest ( ) ) {
							// This is a pull/merge request
							def isGitLab = env.gitlabActionType != null
							def gitBranch = isGitLab ? "merge-requests/${env.CHANGE_ID}" : "PR-${env.CHANGE_ID}"
							def gitRefspecBranch = isGitLab ? 
									 "+refs/merge-requests/${env.CHANGE_ID}/head:refs/remotes/merge-requests/${env.CHANGE_ID} " +
									 "+refs/merge-requests/${env.CHANGE_ID}/head:refs/remotes/origin/merge-requests/${env.CHANGE_ID} " :
									" +refs/pull/${env.CHANGE_ID}/head:refs/remotes/origin/PR-${env.CHANGE_ID}"
							checkout([$class: 'GitSCM',
								branches: [[name: gitBranch ]],
								doGenerateSubmoduleConfigurations: false,
								userRemoteConfigs: [
									[refspec:gitRefspecBranch ,
										url: srcGitRepo, credentialsId: gitCredId,
										]]
							])
						} else {
							checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
												doGenerateSubmoduleConfigurations: false,
												submoduleCfg: [],
												userRemoteConfigs: [[
																	 credentialsId: gitCredId,
																	 url: srcGitRepo,
																	 ]]])
						}
					}
					
					dir("${env.WORKSPACE_ROOT}/nazare-demo-sysadmin") {
						checkout([$class: 'GitSCM', branches: [[name: adminGitBranch]],
							  doGenerateSubmoduleConfigurations: false,
							  submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: gitCredId,
								url: adminGitRepo,
							]]])
					}
				}
			}
		}

		stage('DBB Build') {
			steps {
				script{
					node( zOsAgentLabel ) {
						if ( env.DBB_BUILD_TYPE == null )
							env.DBB_BUILD_TYPE = dbbDefaultBuildType
						if ( env.DBB_HLQ == null )
							env.DBB_HLQ = dbbDefaultbHlq
						if ( env.GROOVYZ_BUILD_EXTRA_OPTS == null )
							env.GROOVYZ_BUILD_EXTRA_OPTS = ""
						if ( env.DBB_DAEMON_PORT != null )
							env.GROOVYZ_BUILD_EXTRA_OPTS = "${env.GROOVYZ_BUILD_EXTRA_OPTS} -DBB_DAEMON_PORT ${env.DBB_DAEMON_PORT} -DBB_DAEMON_HOST 127.0.0.1"
						env.DBB_VERBOSE = buildVerbose
						def rc = sh (returnStatus: true, script: '''#!/bin/sh
							rm -rf ${WORKSPACE}/BUILD-${BUILD_NUMBER}
							if [ ! -z DBB_DAEMON_PORT ]
							then
							   mkdir -p ${WORKSPACE}/BUILD-${BUILD_NUMBER}
							   chmod 777 ${WORKSPACE}/BUILD-${BUILD_NUMBER}
							fi
							CMD="$DBB_HOME/bin/groovyz $GROOVYZ_BUILD_EXTRA_OPTS ${WORKSPACE_ROOT}/nazare-demo-sysadmin/zAppBuild/build.groovy\
								--logEncoding UTF-8 -w ${WORKSPACE} --application nazare-demo-genapp --sourceDir ${WORKSPACE}\
								--workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}  --hlq ${DBB_HLQ}.GENAPP --url $DBB_URL -pw ADMIN -d $DBB_BUILD_TYPE $DBB_BUILD_EXTRA_OPTS $DBB_VERBOSE"
							echo $CMD
							$CMD
							exit $?
						''')
						if ( rc != 0 )
							error("DBB Build failed!!!")
						// Do not deploy if nothing in the build list
						def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/buildList.txt")
						hasBuildFiles = files.length > 0 && files[0].length > 0
						}
					}
					}
			post {
				always {
					node( zOsAgentLabel ) {
						dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
								archiveArtifacts allowEmptyArchive: true,
											artifacts: '**/*.log,**/*.json,**/*.html',
											excludes: '**/*clist',
											onlyIfSuccessful: false
						}
					}
				}
			}
		}
		
		
		stage('UCD Version/Package') {
			steps {
				script {
					node( zOsAgentLabel ) {
						if ( hasBuildFiles ) {
							def ucdBuztool = env.UCD_BUZTOOL_PATH
							def ucdShortUrl = "${server.url}".substring(0, "${server.url}".lastIndexOf('/'))
							BUILD_OUTPUT_FOLDER = sh (script: "ls ${WORKSPACE}/BUILD-${BUILD_NUMBER}  | grep build | sort -u", returnStdout: true).trim()
							dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}") {
								withCredentials([usernamePassword(credentialsId: artiCredentialsId, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
									writeFile file: "${WORKSPACE}/BUILD-${BUILD_NUMBER}/artifactoy.properties", encoding: "utf-8",
									   text:"""password=$PASSWORD
username=$USERNAME
Repository_type=artifactory
repository=${repositoryPath}/${zOsAgentLabel}
url=${ucdShortUrl}
									  """
								}
								sh "$DBB_HOME/bin/groovyz $GROOVYZ_BUILD_EXTRA_OPTS  ${WORKSPACE_ROOT}/nazare-demo-sysadmin/Pipeline/CreateUCDComponentVersion/dbb-ucd-packaging.groovy --buztool ${ucdBuztool} --component ${ucdComponent} --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER} --ar ${WORKSPACE}/BUILD-${BUILD_NUMBER}/artifactoy.properties"
								hasBuildFiles = fileExists "${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}/shiplist.xml"
							}
						}
					}
				}
			}
		}
		
		stage('UCD Deploy') {
			steps {
				script{
					if ( hasBuildFiles ) {
						script{
							step(
								  [$class: 'UCDeployPublisher',
									deploy: [
										deployApp: ucdApplication,
										deployDesc: 'Requested from Jenkins',
										deployEnv: ucdEnv,
										deployOnlyChanged: false,
										deployProc: ucdProcess,
										deployVersions: ucdComponent + ':latest'],
									siteName: ucdSite])
						}
					}
				}
			}
			post {
				always {
					node( zOsAgentLabel ) {
						dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
							archiveArtifacts allowEmptyArchive: true, 
											artifacts: '*_bind.log,*_refresh.log', 
											onlyIfSuccessful: false
						}
					}
				}
			}	
		}
		
		stage ('Integration Tests'){
			 steps {
				   script{
					   node( zOsAgentLabel ) {
						   if ( env.ZCEE_CRED_ID ) {
							   zceeCredId = env.ZCEE_CRED_ID
						   }
						   zceeUrl = env.ZCEE_URL
						}
						withCredentials([usernamePassword(credentialsId: zceeCredId, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
								// Very basic for now
								env.ZCEE_URL = zceeUrl
								def rc = sh (returnStatus: true, script: '''#!/bin/sh
									mkdir -p /tmp/BUILD-${BUILD_NUMBER}
									echo "curl  --silent -k -u $USERNAME:$PASSWORD -H \"Content-Type:application/json\" -X GET $ZCEE_URL/genapp/motorPolicy/2/1 > /tmp/BUILD-${BUILD_NUMBER}/api.log"
									curl --silent -k -u $USERNAME:$PASSWORD -H "Content-Type:application/json" -X GET $ZCEE_URL/genapp/motorPolicy/2/1 > /tmp/BUILD-${BUILD_NUMBER}/api.log
									grep "CustomerNumber..2"  /tmp/BUILD-${BUILD_NUMBER}/api.log
									exit $?
							   ''')
							   if ( rc != 0 ) {
								   def result = sh (script: "cat /tmp/BUILD-${BUILD_NUMBER}/api.log", returnStdout: true).trim()
								   println "$result"
								   error("Integration Tests failed!!!")
							   }
						}
				  }
			 }
		}
	}
}
